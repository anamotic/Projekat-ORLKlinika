// <auto-generated />
using System;
using App.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Lekar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Subspecijalizacija")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Lekari");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ime = "Nikola",
                            Prezime = "Jovanović",
                            Subspecijalizacija = 0
                        },
                        new
                        {
                            Id = 2,
                            Ime = "Marija",
                            Prezime = "Petrović",
                            Subspecijalizacija = 1
                        },
                        new
                        {
                            Id = 3,
                            Ime = "Darko",
                            Prezime = "Marković",
                            Subspecijalizacija = 2
                        },
                        new
                        {
                            Id = 4,
                            Ime = "Ivan",
                            Prezime = "Urošević",
                            Subspecijalizacija = 4
                        },
                        new
                        {
                            Id = 5,
                            Ime = "Zoran",
                            Prezime = "Ivanović",
                            Subspecijalizacija = 6
                        },
                        new
                        {
                            Id = 6,
                            Ime = "Lidija",
                            Prezime = "Radosavljević",
                            Subspecijalizacija = 5
                        },
                        new
                        {
                            Id = 7,
                            Ime = "Ivica",
                            Prezime = "Radić",
                            Subspecijalizacija = 4
                        },
                        new
                        {
                            Id = 8,
                            Ime = "Jelena",
                            Prezime = "Stanojević",
                            Subspecijalizacija = 3
                        });
                });

            modelBuilder.Entity("App.Domain.MedicinskiTehnicar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lozinka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MedicinskiTehnicari");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ime = "Ivana",
                            Lozinka = "1234",
                            Prezime = "Babić",
                            Username = "ib1234"
                        });
                });

            modelBuilder.Entity("App.Domain.Pacijent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pacijenti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumRodjenja = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ime = "Ana",
                            Prezime = "Kovačević"
                        },
                        new
                        {
                            Id = 2,
                            DatumRodjenja = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Ime = "Marko",
                            Prezime = "Stanić"
                        });
                });

            modelBuilder.Entity("App.Domain.Termin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("LekarId")
                        .HasColumnType("int");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<int>("UslugaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LekarId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("UslugaId");

                    b.ToTable("Termini");
                });

            modelBuilder.Entity("App.Domain.Usluga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Subspecijalizacija")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usluge");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Audiološki pregled",
                            Opis = "Provera sluha",
                            Subspecijalizacija = 0
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Endoskopski pregled nosa",
                            Opis = "Detaljan pregled nosa",
                            Subspecijalizacija = 1
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Timpanometrija",
                            Opis = "Provera funkcionalnosti srednjeg uha",
                            Subspecijalizacija = 0
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Ispiranje uha",
                            Opis = "Ispiranje uha",
                            Subspecijalizacija = 0
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Vestibulometrija",
                            Opis = "Ispitivanje funkcije akustičkog nerva",
                            Subspecijalizacija = 0
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "Tonsiloadenoidektomija",
                            Opis = "Hirurško uklanjanje krajnika i adenoida",
                            Subspecijalizacija = 2
                        },
                        new
                        {
                            Id = 7,
                            Naziv = "Septoplastika",
                            Opis = "Hirurška korekcija devijacije nosne pregrade",
                            Subspecijalizacija = 1
                        },
                        new
                        {
                            Id = 8,
                            Naziv = "FESS - Funkcionalna endoskopska hirurgija sinusa",
                            Opis = "Minimalno invazivna operacija sinusa",
                            Subspecijalizacija = 1
                        },
                        new
                        {
                            Id = 9,
                            Naziv = "Laringoskopija",
                            Opis = "Pregled glasnih žica i larinksa",
                            Subspecijalizacija = 2
                        },
                        new
                        {
                            Id = 10,
                            Naziv = "Polipektomija nosa",
                            Opis = "Uklanjanje nosnih polipa",
                            Subspecijalizacija = 1
                        },
                        new
                        {
                            Id = 11,
                            Naziv = "Pregled glasnica i vokalne terapije",
                            Opis = "Dijagnostika i terapija poremećaja glasa",
                            Subspecijalizacija = 2
                        },
                        new
                        {
                            Id = 12,
                            Naziv = "Pregled i lečenje hrkanja",
                            Opis = "Dijagnostika i tretman problema hrkanja i apneje",
                            Subspecijalizacija = 1
                        },
                        new
                        {
                            Id = 13,
                            Naziv = "Punkcija sinusa",
                            Opis = "Evakuacija sekreta iz sinusa",
                            Subspecijalizacija = 1
                        },
                        new
                        {
                            Id = 14,
                            Naziv = "Uklanjanje stranog tela iz uha, nosa ili grla",
                            Opis = "Ekstrakcija stranih tela kod odraslih i dece",
                            Subspecijalizacija = 3
                        },
                        new
                        {
                            Id = 15,
                            Naziv = "Biopsija promene u usnoj duplji ili larinksu",
                            Opis = "Uzimanje uzorka za histopatološku analizu",
                            Subspecijalizacija = 2
                        },
                        new
                        {
                            Id = 16,
                            Naziv = "Lasersko uklanjanje promena u grlu",
                            Opis = "Laserska terapija polipa, cisti ili papiloma",
                            Subspecijalizacija = 2
                        },
                        new
                        {
                            Id = 17,
                            Naziv = "Otoskopski pregled",
                            Opis = "Pregled spoljašnjeg i srednjeg uha",
                            Subspecijalizacija = 0
                        },
                        new
                        {
                            Id = 18,
                            Naziv = "Allergološko testiranje na inhalacione alergene",
                            Opis = "Testiranje alergijskih reakcija na aeroalergene",
                            Subspecijalizacija = 1
                        });
                });

            modelBuilder.Entity("App.Domain.ZdravstveniKarton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alergije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dijagnoza")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacijentId")
                        .HasColumnType("int");

                    b.Property<string>("Terapije")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PacijentId")
                        .IsUnique();

                    b.ToTable("ZdravstveniKartoni");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alergije = "Penicilin",
                            Dijagnoza = "Nema",
                            PacijentId = 1,
                            Terapije = "Nema"
                        },
                        new
                        {
                            Id = 2,
                            Alergije = "Nema",
                            Dijagnoza = "Sinusitis",
                            PacijentId = 2,
                            Terapije = "Nafazol kapi"
                        });
                });

            modelBuilder.Entity("App.Domain.Termin", b =>
                {
                    b.HasOne("App.Domain.Lekar", "Lekar")
                        .WithMany("Termini")
                        .HasForeignKey("LekarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Pacijent", "Pacijent")
                        .WithMany("Termini")
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Usluga", "Usluga")
                        .WithMany("Termini")
                        .HasForeignKey("UslugaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lekar");

                    b.Navigation("Pacijent");

                    b.Navigation("Usluga");
                });

            modelBuilder.Entity("App.Domain.ZdravstveniKarton", b =>
                {
                    b.HasOne("App.Domain.Pacijent", "Pacijent")
                        .WithOne("ZdravstveniKarton")
                        .HasForeignKey("App.Domain.ZdravstveniKarton", "PacijentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pacijent");
                });

            modelBuilder.Entity("App.Domain.Lekar", b =>
                {
                    b.Navigation("Termini");
                });

            modelBuilder.Entity("App.Domain.Pacijent", b =>
                {
                    b.Navigation("Termini");

                    b.Navigation("ZdravstveniKarton")
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.Usluga", b =>
                {
                    b.Navigation("Termini");
                });
#pragma warning restore 612, 618
        }
    }
}
